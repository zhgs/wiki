if(typeof AWPageMounts=='undefined'){AWPageMounts={}};AWPageMounts['m002']=[{"name":"01-Markdown快速开始.md","path":"002-学习markdown/01-Markdown快速开始.md","content":"# Markdown 快速开始\r\n\r\n>1. [简介](#简介 \"简介\")\r\n1. [语法快速入门](#语法快速入门 \"语法快速入门\")\r\n    1. [【标题】](#【标题】 \"【标题】\")\r\n    1. [【修辞和强调】](#【修辞和强调】 \"【修辞和强调】\")\r\n    1. [【删除线】](#【删除线】 \"【删除线】\")\r\n    1. [【列表】](#【列表】 \"【列表】\")\r\n    1. [【链接】](#【链接】 \"【链接】\")\r\n    1. [【图片】](#【图片】 \"【图片】\")\r\n    1. [【代码】](#【代码】 \"【代码】\")\r\n    1. [【代码段】](#【代码段】 \"【代码段】\")\r\n    1. [【表格】](#【表格】 \"【表格】\")\r\n    1. [【引用】](#【引用】 \"【引用】\")\r\n    1. [【分割线】](#【分割线】 \"【分割线】\")\r\n    1. [【换行】](#【换行】 \"【换行】\")\r\n    1. [【html】](#【html】 \"【html】\")\r\n1. [研究更多 markdown 语法详细细节](#研究更多 markdown 语法详细细节 \"研究更多 markdown 语法详细细节\")\r\n\r\n\r\n## 简介\r\nMarkdown是为那些需要经常码字或者进行文字排版的、对码字手速和排版顺畅度有要求的人群设计的，他们希望用键盘把文字内容啪啪啪地打出来后就已经排版好了，最好从头到尾都不要使用鼠标。  \r\n这些人包括经常需要写文档的码农、博客写手、网站小编、出版业人士等等。  \r\nMarkdown的语法简洁明了、学习容易，得到了许多著名网络平台的支持，例如代码托管平台[Github](https://github.com/)、博客平台[WordPress](https://cn.wordpress.org/)等等。  \r\n\r\n## 语法快速入门\r\n\r\n### <font color=#C71585>【标题】</font>\r\n在行首插入1到6个#，对应1到6阶标题\r\n    # 这是 H1\r\n    ## 这是 H2\r\n    ### 这是 H3\r\n    #### 这是 H4\r\n    ##### 这是 H5\r\n    ###### 这是 H6\r\n渲染效果：  \r\n# 这是 H1\r\n## 这是 H2\r\n### 这是 H3\r\n#### 这是 H4\r\n##### 这是 H5\r\n###### 这是 H6\r\n\r\n### <font color=#C71585>【修辞和强调】</font>\r\n使用星号和底线来标记需要强调的区段\r\n\r\n    **加粗**\r\n    __加粗__\r\n    *斜体*\r\n    _斜体_\r\n\r\n渲染效果：  \r\n**加粗**  \r\n__加粗__  \r\n*斜体*  \r\n_斜体_  \r\n\r\n### <font color=#C71585>【删除线】</font>\r\n\r\n    ~~要删掉的内容~~\r\n\r\n渲染效果：  \r\n~~要删掉的内容~~\r\n\r\n### <font color=#C71585>【列表】</font>\r\n**无序列表** 使用星号、加号和减号来做为列表的项目标记\r\n    * Candy.\r\n    * Gum.\r\n    + Booze.\r\n    * Booze. 长文本长文本长文本长文本长文本长文本长文本长文本长文本长文本长文本长文本长文本长文本长文本长文本长文本长文本长文本长文本长文本  \r\n    这里是断行-文本长文本长文本长文本  \r\n    这里是断行-文本长文本长文本长文本\r\n    - Booze.\r\n      + 嵌套\r\n      * 嵌套\r\n\r\n渲染效果：  \r\n* Candy.\r\n* Gum.\r\n+ Booze.\r\n* Booze. 长文本长文本长文本长文本长文本长文本长文本长文本长文本长文本长文本长文本长文本长文本长文本长文本长文本长文本长文本长文本长文本  \r\n这里是断行-文本长文本长文本长文本  \r\n这里是断行-文本长文本长文本长文本\r\n- Booze.\r\n  + 嵌套\r\n  * 嵌套\r\n\r\n**有序列表** 则是使用一般的数字接着一个英文句点作为项目标记\r\n    1. Red\r\n    50. Green\r\n    1000. Blue\r\n\r\n渲染效果：  \r\n1. Red\r\n50. Green\r\n1000. Blue\r\n\r\n### <font color=#C71585>【链接】</font>\r\n在方括号后面用圆括号接上链接\r\n\r\n    这是一个[链接显示文本](http://www.baidu.com \"链接title文本\")\r\n\r\n渲染效果：  \r\n这是一个[链接显示文本](http://www.baidu.com \"链接title文本\")\r\n\r\n### <font color=#C71585>【图片】</font>\r\n图片的语法和链接很像\r\n\r\n    ![alt文本](amWiki/images/logo.png \"Title\")\r\n\r\n渲染效果：  \r\n![alt文本](amWiki/images/logo.png \"Title\")\r\n\r\n### <font color=#C71585>【代码】</font>\r\n使用反引号 \\` 来标记代码区段\r\n\r\n    我是`code`，`<div>division</div>`\r\n\r\n渲染效果：  \r\n我是`code`，`<div>division</div>`\r\n\r\n### <font color=#C71585>【代码段】</font>\r\n如果要建立一个已经格式化好的代码区块，只要每行都缩进 4 个空格或是一个 tab 就可以了\r\n\r\n        var name = \'Candy\'\r\n\r\n渲染效果：  \r\n\r\n    var name = \'Candy\'\r\n\r\n### <font color=#C71585>【表格】</font>\r\n使用竖线分割内容，且同时使用“---”与“:”指定对齐方式\r\n\r\n    | Header01 | Header02 | Header03\r\n    | -------- | :------: | ---:\r\n    | 默认 | 居中 | 右\r\n\r\n渲染效果：  \r\n\r\n| Header01 | Header02 | Header03\r\n| -------- | :------: | ---:\r\n| 默认 | 居中 | 右\r\n\r\n### <font color=#C71585>【引用】</font>\r\n只需要在文本前加入 > 这种尖括号（大于号）即可\r\n\r\n    >这里是一段引用\r\n\r\n渲染效果：  \r\n>这里是一段引用\r\n\r\n### <font color=#C71585>【分割线】</font>\r\n只需要三个 \\- 号\r\n\r\n    ---\r\n\r\n渲染效果：  \r\n\r\n---\r\n\r\n### <font color=#C71585>【换行】</font>\r\n只需要两个以上的空格然后回车\r\n\r\n    我是首行  \r\n    我换行了\r\n\r\n渲染效果：  \r\n我是首行  \r\n我换行了\r\n\r\n### <font color=#C71585>【html】</font>\r\n可以直接在文档里书写 HTML，不需要额外标注这是 HTML\r\n\r\n    <div>division</div>\r\n\r\n渲染效果：  \r\n<div>division</div>\r\n\r\n\r\n## 研究更多 markdown 语法详细细节\r\n\r\n- [创始人 John Gruber 的 Markdown 语法说明](http://daringfireball.net/projects/markdown/syntax)  \r\n- [Markdown 中文版语法说明](http://wowubuntu.com/markdown/)\r\n","timestamp":1522050776929},{"name":"02-amWiki与语法高亮.md","path":"002-学习markdown/02-amWiki与语法高亮.md","content":"# amWiki 与语法高亮\r\n\r\namWiki使用 [highlight.js](https://github.com/isagalaev/highlight.js) 进行预语法高亮渲染，它能对多达一百多种语言、样式提供语法高亮解析  \r\n使用两组每组三个反引号分单独两行将代码包围起来，并在第一组反引号后写上语言类型即可使用语法高亮，例如：\r\n    ```js\r\n    //some js code here\r\n    ```\r\n\r\n## javascript / js 代码\r\n普通代码块效果：  \r\n```\r\n//发送验证码\r\nfunction cd(num) {\r\n    $(\'#code\').val(num + \'秒后可重发\');\r\n    setTimeout(function() {\r\n        if (num - 1 >= 0) {\r\n            cd(num - 1);\r\n        } else {\r\n            $(\'#code\').removeClass(\'bg-gray\').prop(\'disabled\', false).val(\'重新发送验证码\');\r\n        }\r\n    },\r\n    1000);\r\n}\r\n```\r\n```\r\n{\r\n    \"state\": {\r\n        \"code\": 10200,                   //code状态码\r\n        \"msg\": \"ok\"                      //状态描述\r\n    },\r\n    \"data\": {\r\n        \"team_num\": 13,                  //队伍数\r\n        \"position\": \"海珠区新港中路\"      //位置\r\n    }\r\n}\r\n```\r\n\r\n添加 `js`、`javascript` 标记后的效果：\r\n```javascript\r\n//发送验证码\r\nfunction cd(num) {\r\n    $(\'#code\').val(num + \'秒后可重发\');\r\n    setTimeout(function() {\r\n        if (num - 1 >= 0) {\r\n            cd(num - 1);\r\n        } else {\r\n            $(\'#code\').removeClass(\'bg-gray\').prop(\'disabled\', false).val(\'重新发送验证码\');\r\n        }\r\n    },\r\n    1000);\r\n}\r\n```\r\n```js\r\n{\r\n    \"state\": {\r\n        \"code\": 10200,                   //code状态码\r\n        \"msg\": \"ok\"                      //状态描述\r\n    },\r\n    \"data\": {\r\n        \"team_num\": 13,                  //队伍数\r\n        \"position\": \"海珠区新港中路\"      //位置\r\n    }\r\n}\r\n```\r\namWiki对javascript代码片段做了再次增强，可以点击代码块右上角按钮隐藏/显示注释  \r\n当注释处于隐藏状态时不会被复制，比较适合模拟返回json数据的接口时直接拷贝（json不允许注释）\r\n\r\n## Html 代码\r\n普通代码段效果：  \r\n```\r\n<body>\r\n    <div class=\"loading\"><img src=\"/assets/images/loading.gif\"></div>\r\n    <header>some text</header>\r\n    <script type=\"text/javascript\" src=\"/assets/js/jquery-2.1.4.min.js\"></script>\r\n</body>\r\n```\r\n添加 `html` 标记后的效果：\r\n```html\r\n<body>\r\n    <div class=\"loading\"><img src=\"/assets/images/loading.gif\"></div>\r\n    <header>some text</header>\r\n    <script type=\"text/javascript\" src=\"/assets/js/jquery-2.1.4.min.js\"></script>\r\n</body>\r\n```\r\n\r\n## css 代码\r\n普通代码段效果：\r\n```\r\n/* 紧凑 */\r\nhtml,body{display:block;width:100%;height:100%;min-width:320px;}\r\na,img{-webkit-touch-callout:none;}\r\n/* 展开 */\r\ninput[type=\"button\"],\r\ninput[type=\"submit\"],\r\ninput[type=\"reset\"],\r\ntextarea {\r\n    -webkit-appearance: none;\r\n}\r\n```\r\n\r\n添加 `css` 标记后的效果：\r\n```css\r\n/* 紧凑 */\r\nhtml,body{display:block;width:100%;height:100%;min-width:320px;}\r\na,img{-webkit-touch-callout:none;}\r\n/* 展开 */\r\ninput[type=\"button\"],\r\ninput[type=\"submit\"],\r\ninput[type=\"reset\"],\r\ntextarea {\r\n    -webkit-appearance: none;\r\n}\r\n```\r\n\r\n## php 代码\r\n普通代码段效果：\r\n```\r\nprivate function addQuestData($data, $filing_id)\r\n  {\r\n    $quest_num = $data[\'status\'] == 10 ? 1 : 2;\r\n      $where = [\r\n        [\'user_filing_id\', \'=\', $filing_id],\r\n        [\'project_id\', \'=\', $data[\'project_id\']],\r\n        [\'mobile\',\'=\', $data[\'mobile\']],\r\n        [\'quest_num\', \'=\', $quest_num]\r\n      ];\r\n  }\r\n```\r\n添加 `php` 标记后的效果：\r\n```php\r\nprivate function addQuestData($data, $filing_id)\r\n  {\r\n    $quest_num = $data[\'status\'] == 10 ? 1 : 2;\r\n      $where = [\r\n        [\'user_filing_id\', \'=\', $filing_id],\r\n        [\'project_id\', \'=\', $data[\'project_id\']],\r\n        [\'mobile\',\'=\', $data[\'mobile\']],\r\n        [\'quest_num\', \'=\', $quest_num]\r\n      ];\r\n  }\r\n```\r\n\r\n## sql 代码\r\n普通代码段效果：\r\n```\r\nSELECT Company, OrderNumber FROM Orders ORDER BY Company, OrderNumber\r\n```\r\n添加 `sql` 标记后的效果：\r\n```sql\r\nSELECT Company, OrderNumber FROM Orders ORDER BY Company, OrderNumber\r\n```\r\n\r\n## java 代码\r\n普通代码段效果：\r\n```\r\npublic class Test {\r\n   public static void main(String args[]) {\r\n      int x = 10;\r\n      while( x < 20 ) {\r\n         System.out.print(\"value of x : \" + x );\r\n         x++;\r\n         System.out.print(\"\\n\");\r\n      }\r\n   }\r\n}\r\n```\r\n添加 `java` 标记后的效果：\r\n```java\r\npublic class Test {\r\n   public static void main(String args[]) {\r\n      int x = 10;\r\n      while( x < 20 ) {\r\n         System.out.print(\"value of x : \" + x );\r\n         x++;\r\n         System.out.print(\"\\n\");\r\n      }\r\n   }\r\n}\r\n```\r\n","timestamp":1522050776929},{"name":"03-amWiki与流程图.md","path":"002-学习markdown/03-amWiki与流程图.md","content":"# amWiki 与流程图\r\n\r\namWiki 使用 [flowchart.js](https://github.com/adrai/flowchart.js) 进行流程图渲染，它是一款将文本表达式绘制为简单的 svg 流程图的图形库  \r\n流程图代码块和语法高亮类似，不过类型声明须用 `flow` 关键字\r\n    ```flow\r\n    //your flow text here\r\n    ```\r\n\r\n## 流程图样例\r\n代码：\r\n\r\n    ```flow\r\n    st=>start: Start :>https://amwiki.xf09.net[blank]\r\n    e=>end: End :>https://amwiki.xf09.net[blank]\r\n    op1=>operation: My Operation\r\n    op2=>operation: Stuff\r\n    sub1=>subroutine: My Subroutine\r\n    cond=>condition: Yes or No? :>https://amwiki.xf09.net[blank]\r\n    c2=>condition: Good idea\r\n    io=>inputoutput: catch something...\r\n\r\n    st->op1(right)->cond\r\n    cond(yes, right)->c2\r\n    cond(no)->sub1(left)->op1\r\n    c2(yes)->io->e\r\n    c2(no)->op2->e\r\n    ```\r\n效果：\r\n\r\n```flow\r\nst=>start: Start :>https://amwiki.xf09.net[blank]\r\ne=>end: End :>https://amwiki.xf09.net[blank]\r\nop1=>operation: My Operation\r\nop2=>operation: Stuff\r\nsub1=>subroutine: My Subroutine\r\ncond=>condition: Yes or No? :>https://amwiki.xf09.net[blank]\r\nc2=>condition: Good idea\r\nio=>inputoutput: catch something...\r\n\r\nst->op1(right)->cond\r\ncond(yes, right)->c2\r\ncond(no)->sub1(left)->op1\r\nc2(yes)->io->e\r\nc2(no)->op2->e\r\n```\r\n\r\n## 流程图语法介绍\r\n流程图语法分两个部分，一个是声明元素，一个是定义流程\r\n\r\n### 声明元素\r\n语法：\r\n\r\n    tag=>type: content :>url\r\n\r\n1. `tag` 设置元素名称\r\n2. `=>` 元素定义符\r\n2. `type:` 设置元素类型，共分6种：\r\n    - **start**：开始，圆角矩形\r\n    - **end**：结束，圆角矩形\r\n    - **operation**：操作/行动方案，普通矩形\r\n    - **subroutine**：子主题/模块，双边线矩形\r\n    - **condition**：条件判断/问题审核，菱形\r\n    - **inputoutput**：输入输出，平行四边形\r\n3. `content` 设置元素显示内容，中英均可\r\n4. `:>url` 设置元素连接，可选，后接 [blank] 可以新建窗口打开\r\n\r\n提示：注意空格，`=>` 前后都不能接空格；`type:` 后必须接空格；`:>` 是语法标记，中间不能有空格\r\n\r\n### 定义流程\r\n语法：\r\n\r\n    tag1(branch,direction)->tag2\r\n\r\n1. `->` 流程定义符，连接两个元素\r\n2. `branch` 设置 condition 类型元素的两个分支，有 `yes`/`no` 两个值，其他元素无效\r\n3. `direction` 定义流程走线方向，有 `left`/`right`/`top`/`bottom` 四个值，所有元素有效，此项配置可选 (ps:此属性容易造成渲染 bug)  \r\n\r\n小提示：\r\n- 继续注意空格，`->` 前后都不能有空格\r\n- 由于 condition 类型有两个分支，我们一般遇到 condition 元素就换行书写，比如：\r\n        st->op1-c2\r\n        c2(yes)->io->e\r\n        c2(no)->op2->e\r\n","timestamp":1522050776929},{"name":"05-Atom对Markdown的原生支持.md","path":"002-学习markdown/05-Atom对Markdown的原生支持.md","content":"# Atom 编辑器对 Markdown 的原生支持\r\n\r\nAtom 是 Github 开发的开源跨平台的编辑器，原生支持编辑 Markdown 文档\r\n\r\n## 自动完成 Markdown 语法标记\r\n\r\n### 代码段效果-code\r\n输入 `c + Enter`\r\n\r\n![](https://amwiki.xf09.net/docs/assets/001.tiny/13-2c594bb9.png)\r\n\r\n### 粗体效果-bold\r\n输入 `b + Enter`\r\n\r\n![](https://amwiki.xf09.net/docs/assets/001.tiny/13-8620325c.png)\r\n\r\n### 斜体效果-italic\r\n输入 `i + Enter`\r\n\r\n![](https://amwiki.xf09.net/docs/assets/001.tiny/13-0e8a6768.png)\r\n\r\n### 链接效果-link\r\n输入 `l + Enter`\r\n\r\n![](https://amwiki.xf09.net/docs/assets/001.tiny/13-5bd90b0f.png)\r\n\r\n### 图片效果-img\r\n输入 `im + Enter`\r\n\r\n![](https://amwiki.xf09.net/docs/assets/001.tiny/13-e03a0fc8.png)\r\n\r\n### 表格效果-table\r\n输入 `ta + Enter`\r\n\r\n![](https://amwiki.xf09.net/docs/assets/001.tiny/13-fbed2544.png)\r\n\r\n<!--\r\n### todo效果-list\r\n输入`t + Enter`\r\n\r\n![](https://amwiki.xf09.net/docs/assets/001.tiny/13-01a27e09.png)\r\n-->\r\n\r\n## 自动补齐二次单词输入\r\n在第二次输入时，单词可以自动识别与补齐，回车即可完成输入\r\n\r\n![](https://amwiki.xf09.net/docs/assets/001.tiny/13-efba45f0.png)\r\n\r\n## 内置 Markdown 即时预览插件\r\n编辑 Markdown 文档时，使用快捷键 `ctrl + shift + m` 即可在窗口右侧打开 Atom 内置的 markdown-preview 即时预览模块\r\n\r\n![](https://amwiki.xf09.net/docs/assets/001.tiny/13-75213ccd.png)\r\n","timestamp":1522050776929}]